plugins {
	id 'org.springframework.boot' version '2.7.2' // https://docs.spring.io/spring-boot/docs/2.7.2/reference/html/dependency-versions.html#appendix.dependency-versions
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'jacoco'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.epages.restdocs-api-spec' version '0.16.0'
}

ext { 
	snippetsDir = file('build/generated-snippets')
}

group = 'com.tmax.cm'
// TODO git version과 맞추기 (외부 플러그인 사용)
// version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

sourceSets {
	test.java.srcDirs += ["$buildDir/generated/sources/annotationProcessor/java/main"] // test환경에서 mapstruct injection을 하기 위함
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'mysql:mysql-connector-java'
	/**
	* NOTE: mapstruct가 lombok보다 먼저 위치해야 한다
	* LINK: https://github.com/mapstruct/mapstruct-examples
	*/
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
	implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.2.Final'
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor
	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.5.2.Final'
	testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.5.2.Final'

	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'com.auth0:java-jwt:3.19.1'


	// https://mvnrepository.com/artifact/org.projectlombok/lombok-mapstruct-binding
	annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

	// https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator
	// https://docs.jboss.org/hibernate/validator/7.0/reference/en-US/html_single/#section-builtin-constraints
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator'

	// https://mvnrepository.com/artifact/com.h2database/h2
	testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'

	/**
	 * For Documentation
	 * LINK: https://docs.spring.io/spring-restdocs/docs/current/reference/html5/#getting-started
	 */
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' 
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.0'


}

test { 
	outputs.dir snippetsDir
}

asciidoctor { 
	inputs.dir snippetsDir 
	configurations 'asciidoctorExt' 
	dependsOn test 
}

tasks.named('test') {
	useJUnitPlatform()
}

openapi3 {
    servers = [
            {
                url = 'http://192.168.159.41:18080/superstore'
                description = 'Development server'
            },
            {
                url = 'http://localhost:8080/superstore'
                description = 'Local server'
            }
    ]
    title = 'SuperStore API'
    description = 'SuperStore API 명세입니다'
    version = '0.1.0'
    format = 'yaml'
}